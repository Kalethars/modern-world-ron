include "ctw_lib.bhs"

int conquest sum_tribute( int offerer, int offeree );

conquest
{

  static int red = 1;
  static int blue = 2;
  static int purple = 3;
  static int green = 4;
  static int yellow = 5;
  static int teal = 6;
  static int white = 7;
  static int orange = 8;
  
  int temp_amount;

  int looking;

  static int defeatable[] = [0,0,0,0,0,0,0,0,0];
  
  static int attitudes[] = [10,10,10,10,10,10,10,10,10];
  static int fought[] = [0,0,0,0,0,0,0,0,0];
  static int trade[] = [0,0,0,0,0,0,0,0,0];

  static int tribute_amount = 6000;
  static int ally_once = 0;
  
  int temp_attitude;
  int factor;

  int high_nation;
  int low_nation;
  int nation;
  int amount;
  int tribe;
  int who;
  int building;
  int unit;
  String city_name;
  int x;
  int y;
  int dir;
  int radius;
  int center;
  int low_score;
  int high_score;
  int cities;
  int temp_score;

  static int count = 2;
  static int nation_count = 2;
  static int diff = get_difficulty();
  static int end_time = get_time_limit();
  int cur_time;

  run_once {
    //set_timer("diplo", rand_int(600, 900));
   // set_timer("comp_ally", rand_int(240, 800));
    set_timer("comp_ally2", rand_int(240, 800));
    set_timer("set_attitudes", 120);
    disable_trigger("defeat2");
    disable_trigger("defeat3");
    disable_trigger("defeat4");
    disable_trigger("defeat5");
    disable_trigger("defeat6");
    disable_trigger("defeat7");
    disable_trigger("defeat8");
    set_timer("move", 90);
  }

   if (timer_expired("move")) {
    set_timer("move", 5);
    for (who = 2; who < 9; who++) {
      building = find_city_id(find_city_name(who));
      x = object_position_x(who, building) - 10;
      y = object_position_y(who, building) - 10;
      for (i = 0; i < num_type_upgrade(who, "Transport Galleon"); i++) {
        unit = find_unit(who, "Transport Galleon");
        if (is_idle(who, unit)) {
          unit_move_order(who, unit, x, y);
        }
      }
    }
  }

  trigger second(num_cities(blue) > 0) {
    city_name = find_city_name(blue);
    set_capital(blue, city_name);
    enable_trigger("defeat2");
    defeatable[blue] = 1;
  }

  trigger third(num_cities(purple) > 0) {
    city_name = find_city_name(purple);
    set_capital(purple, city_name);
    enable_trigger("defeat3");
    defeatable[purple] = 1;
  }

  trigger fourth(num_cities(green) > 0) {
    city_name = find_city_name(green);
    set_capital(green, city_name);
    enable_trigger("defeat4");
    defeatable[green] = 1;
  }

  trigger fifth(num_cities(teal) > 0) {
    city_name = find_city_name(teal);
    set_capital(teal, city_name);
    enable_trigger("defeat5");
    defeatable[teal] = 1;
  }

  trigger sixth(num_cities(yellow) > 0) {
    city_name = find_city_name(yellow);
    set_capital(yellow, city_name);
    enable_trigger("defeat6");
    defeatable[yellow] = 1;
  }

  trigger seventh(num_cities(white) > 0) {
    city_name = find_city_name(white);
    set_capital(white, city_name);
    enable_trigger("defeat7");
    defeatable[white] = 1;
  }

  trigger eigth(num_cities(orange) > 0) {
    city_name = find_city_name(orange);
    set_capital(orange, city_name);
    enable_trigger("defeat8");
    defeatable[orange] = 1;
  }

  trigger defeat2(num_cities(blue) == 0) {
    defeat(blue);
  }

  trigger defeat3(num_cities(purple) == 0) {
    defeat(purple);
  }

  trigger defeat4(num_cities(green) == 0) {
    defeat(green);
  }

  trigger defeat5(num_cities(teal) == 0) {
    defeat(teal);
  }

  trigger defeat6(num_cities(yellow) == 0) {
    defeat(yellow);
  }

  trigger defeat7(num_cities(white) == 0) {
    defeat(white);
  }

  trigger defeat8(num_cities(orange) == 0) {
    defeat(orange);
  }

  cur_time = time_min();
  if (cur_time >= end_time) defeat(red);
  
  trigger (time_later_than(75)) {
    for (i = 2; i < defeatable.length; i++) {
      if (defeatable[i] == 0) {
        defeatable[i] = 1;
        defeat(i);
      }
    }
  }

   
  if (timer_expired("set_attitudes")) {
    set_timer("set_attitudes", 120);
    attitudes[rand_int(2,8)]++;
    attitudes[rand_int(2,8)]--;
    attitudes[rand_int(2,4)]++;
    attitudes[rand_int(5,8)]--;
    high_score = 0;
    low_score = 0;
    for (nation = 1; nation < 9; nation++) {
      temp_score = score(nation);
      if (temp_score > high_score) high_score = temp_score;
      else if (temp_score < low_score) low_score = temp_score;
    }
    if (high_score == red) {
      for (z = 2; z < 5; z++) {
        attitudes[z]++;
      }
      for (z = 5; z < 9; z++) {
        attitudes[z]--;
      }
    } else if (low_score == red) {
      for (z = 2; z < 6; z++) {
        attitudes[z]--;
      }
      for (z = 6; z < 8; z++) {
        attitudes[z]++;
      }
    }
    for (nation = 2; nation < 9; nation++) {
      if (fought[nation] == 0) {
        if (have_fought(nation, red)) {
          fought[nation] = 1;
          attitudes[nation]--;
        }
      }
      if (have_trade(nation, red)) {
        if (trade[nation] == 0) attitudes[nation]++;
        trade[nation] = 1;
      } else {
        if (trade[nation] == 1) attitudes[nation]--;
        trade[nation] = 0;
      }
    }
  }

  trigger allies() {
    for (nation = 2; nation < 9; nation++) {
      if (have_alliance(1, nation)) {
        ally_once = 1;
        break;
      }
    }
    if (ally_once == 0) enable_trigger("allies");
  }

  //combine units of allied tribes
  for (nation = 2; nation < 9; nation++) {
    if (num_units(nation) > 0 || num_buildings(nation) > 0) {// && timer_expired("diplo")) {
      if (attitudes[nation] <= 0) attitudes[nation] = 1;
      else if (attitudes[nation] >= 21) attitudes[nation] = 20;
      if (score(red) < 1000) factor = 100;
      else factor = 1000;
      temp_attitude = (score(red)/factor) - (score(nation)/factor);
      temp_attitude += num_players() - 7;
      if (ally_once == 0) temp_attitude += 5;
      else temp_attitude += 6 - diff/2;
      //set_timer("diplo", rand_int(50, 250));
      if (num_cities(nation) < 1) diplomacy_set_reject(nation);
      else diplomacy_set_wait(nation);
      if (offer_made(red, nation)) {
        if (sum_tribute(nation,1) > 0) {
          reject_offer(nation, 1);
        }
        else if (is_offering_peace(red, nation)) {
          temp_amount = tribute_amount/(attitudes[nation] + temp_attitude);
          temp_amount += -temp_amount%100;
          if (sum_tribute(red,nation) >= temp_amount) {
            accept_offer(nation, red);
            attitudes[nation]++;                     
          } else {
            make_counter_offer(red, nation, "Wealth", temp_amount - sum_tribute(red,nation), $S("We will need a more compelling offer from you."));
            //attitudes[nation]--;
          }
        } else if (is_offering_alliance(red, nation)) {
          temp_amount = (tribute_amount * 2)/(attitudes[nation] + temp_attitude);
          temp_amount += -temp_amount%100;
          if (sum_tribute(red,nation) >= temp_amount) {
            accept_offer(nation, red);
            attitudes[nation]++;      
          } else {
            make_counter_offer(red, nation, "Wealth", temp_amount - sum_tribute(red,nation), $S("We will need a more compelling offer from you."));
            //attitudes[nation]--;
          }
        } else {//if (attitudes[nation] > 2) {
          if (have_war(red,nation)) attitudes[nation] += sum_tribute(red,nation)/(tribute_amount/attitudes[nation]);
          else if (have_peace(red,nation)) attitudes[nation] += sum_tribute(red,nation)/((tribute_amount * 2)/attitudes[nation]);
          accept_offer(nation, red);
        } 
      }
    }
  }
  //if (timer_expired("comp_ally")) {
    //set_timer("comp_ally", rand_int(240, 800));
    //low_score = 0;
    //high_score = 0;
    //for (nation = 2; nation < 9; nation++) {
      //temp_score = score(nation);
      //if (temp_score > high_score) {
        //high_score = temp_score;
        //high_nation = nation;
      //} else if (temp_score < low_score) {
        //low_score = temp_score;
        //low_nation = nation;
      //}
    //}
    //make_alliance(high_nation, low_nation);
  //}
  
  if (timer_expired("comp_ally2")) {
    set_timer("comp_ally", rand_int(240, 800));
    high_nation = rand_int(2,8);
    do {
      low_nation = rand_int(2,8);
    } while (low_nation == high_nation);
    make_alliance(high_nation, low_nation);
  }

  if (time_later_than(count)) {
    if (time_earlier_than(10)) {
      count += 5;
    }
    else if (time_earlier_than(20)) {
      count += 4;
    }
    else if (time_earlier_than(30)) {
      count += 3;
    }
    else if (time_earlier_than(60)) {
      count += 2;
    }
    else {
      count += 1;
    }
    nation = nation_count;
    nation_count++;
    if (nation_count >= 9) {
      nation_count = 2;
    }
      if (num_type(nation, "Citizen") == 0 && defeatable[nation] == 0) {
        force_transport_ability(nation);
        dir = get_conquest_invasion_dir() + rand_int(60,300);
        if (dir > 360) {
          dir += -360;
        }
        center = get_map_size() / 2;
        radius = center - 10;
        x = (int)(radius * sin(dir) + center);
        y = (int)(center - (radius * cos(dir)));  
        while (!map_is_land(x,y)) {
          dir = get_conquest_invasion_dir() + rand_int(0,360);
          if (dir > 360) {
            dir += -360;
          }
          center = get_map_size() / 2;
          radius = center - 10;
          x = (int)(radius * sin(dir) + center);
          y = (int)(center - (radius * cos(dir)));  
          looking++;
          if (looking > 15) {
            break;
          }
        }
        if (looking < 16) {
          create_unit_upgrade(nation, x, y, "Citizen", (count/10)+1);
          if (num_military_units(nation) == 0) {
            create_unit_upgrade(nation, x + 2, y, "Slingers", diff+4);
            create_unit_upgrade(nation, x + 2, y, "Light Horse", diff+4);      
            create_unit_upgrade(nation, x + 2, y, "Supply Wagon", (count/15)+1);
            create_unit_upgrade(nation, x + 3, y, "Scout", (count/15)+1);
            if (count > 15) {
              create_unit_upgrade(nation, x + 4, y, "Hoplites", (count/15)+1);
              create_unit_upgrade(nation, x + 5, y, "Horse Archer", (count/15)+1);
            }
            if (count > 30 && diff > 3) {
              create_unit_upgrade(nation, x + 5, y, "Slingers", (count/20)+1);
              create_unit_upgrade(nation, x + 5, y, "Light Horse", (count/20)+1);
              create_unit_upgrade(nation, x + 5, y, "Catapult", (count/15)+1);
            }
          }
            //get the proper angle
          dir = dir + 180;
          if (dir >= 360) {
            dir = dir - 360;
          }
          group_jump_move(nation, x, y, dir);
        }
        else {
          count = count - 2;
        }
      }
    }
  
}

int conquest sum_tribute( int offerer, int offeree )
{
  int total;
  String resources[] = ["Food", "Wealth", "Metal", "Timber"];

  for (z = 0; z < resources.length; z++) {
    total += amount_offered(offerer,offeree,resources[z]);
  }

  return total;

}