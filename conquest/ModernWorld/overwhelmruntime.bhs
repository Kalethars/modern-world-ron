include "ctw_lib.bhs"
//runtime script for Conquest style scenarios

conquest {

  static time_limit = 90;
  int x, y, x2, y2, dir, radius, center, flag, dist, mindist;
  String cap_name;
  int n;
  int i, j;
  int building;
  static int terr_per[]=[0, 0, 0, 0, 0];
  static int diff = get_difficulty();
  static int nation;
  static String cap[] = ["", "", "", "",""];
  static String leader_name[] = ["Blank", "Red", "Blue", "Purple", "Green", "Yellow"];

  run_once {
    ctw_add_objective_text($S("The barbarians will be immediately defeated if it loses its capital."), "Hint_id", 0);
	ctw_add_objective_text($S("An enemy will win when it controls more than 60% of the territory."), "Hint2_id", 0);
    time_limit = get_time_limit();
    add_objective_text("Territory controlled:", 1, "");
    for (nation = 1; nation < 5; nation++){
      terr_per[nation]=get_territory(nation);
      leader_name[nation]=get_leader_name(nation);
      cap[nation]=find_capital(nation);
      add_objective_text(parse("$STRING0: $NUM1% (Capital: $STRING2)", leader_name[nation], terr_per[nation], cap[nation]), nation+1, "");
    }
	
	for (i = 3; i < 9; i++){
		if (num_cities(i)==0) {
			dist=300;
			mindist=60;
			while (num_cities(i)==0) {
			  flag = 1;
			  dir = get_conquest_invasion_dir() + rand_int(30,150)*(rand_int(0,2)*2-1);
			  center = get_map_size() / 2;
			  radius = rand_int(0,(int)(center*1.4));
			  x = (int)(radius * sin(dir) + center);
			  y = (int)(center - (radius * cos(dir)));
			  for (j = 1; j < i; j++){
				if  (x<10 || x>get_map_size()-10 || y<10 || y>get_map_size()-10){
					flag=0;
					break;
				}
				cap_name = find_city_name(j);
				building = find_city_id(cap_name);
				x2 = object_position_x(j, building);
				y2 = object_position_y(j, building);
				if ((x-x2)*(x-x2)+(y-y2)*(y-y2)<=dist*dist){
					if (dist>mindist) dist--;
					flag = 0;
					break;
				}
			  }
			  if (map_is_buildable(x,y) && flag==1){
				create_building_near(i, x, y, "Small City", 1);
			  }
			}
			cap_name = find_city_name(i);
			set_capital(i, cap_name);
			place_building(i, "Farm", cap_name);
			place_building(i, "Farm", cap_name);
			place_building(i, "Farm", cap_name);
			set_base_rate(i, "Food", get_base_rate(i,"Food")+30-10*(num_type(i,"Farm")));
			place_building(i, "Woodcutter's Camp", cap_name);
			place_building(i, "Library", cap_name);
			if (num_type(i, "Citizen") == 0){
				create_unit_upgrade(i, x, y, "Citizen", 5);
				if (num_military_units(i) == 0) {
					create_unit_upgrade(i, x, y, "Slingers", 4);
					create_unit_upgrade(i, x, y, "Light Horse", 2);
					create_unit_upgrade(i, x, y, "Scout", 1);
				}
					//get the proper angle
				dir = dir + 180;
				if (dir >= 360) {
					dir = dir - 360;
				}
			}
			group_jump_move(i, x, y, dir);
		}
		if (num_type(i,"Woodcutter's Camp")==0){
			place_building(i, "Dock", cap_name);
			set_base_rate(i, "Timber", get_base_rate(i,"Timber")+10);
		}
		if (num_type(i,"Library")==0){
			gain_tech(i,"Civic");
			gain_tech(i,"Commerce");
			gain_tech(i,"Commerce");
			gain_tech(i,"Science");
		}
		if (num_type(i,"Mine")==0) {
			place_building(i, "Mine", cap_name);
			if (num_type(i,"Mine")==0){
				set_base_rate(i, "Metal", get_base_rate(i,"Metal")+10);
			} else{
				destroy_building(i,find_build(i,"Mine"));
			}
		}
		if (num_type(i,"University")==0) {
			place_building(i, "University", cap_name);
			if (num_type(i,"University")==0){
				set_base_rate(i, "Knowledge", get_base_rate(i,"Knowledge")+10);
			} else{
				destroy_building(i,find_build(i,"University"));
			}
		}
		if (num_type(i,"Market")==0) {
			place_building(i, "Market", cap_name);
			if (num_type(i,"Market")==0){
				set_base_rate(i, "Wealth", get_base_rate(i,"Wealth")+10);
			} else{
				destroy_building(i,find_build(i,"Market"));
			}
		}
	}
  }
  cur_time = time();
  
  if (terr_per[1] >= 75) victory (1);
  for (nation = 2; nation < 5; nation++){
    if (terr_per[nation] >= 60) victory (nation);
  }

  for (nation = 1; nation < 5; nation++){
    cap[nation] = find_capital(nation);
    terr_per[nation] = get_territory(nation);
    change_objective_text(nation+1, parse("$STRING0: $NUM1% (Capital: $STRING2)", leader_name[nation], terr_per[nation], cap[nation]));
  }
  
  trigger (city_captured_by(3, 1, cap[3])){
	while (num_type(3, "Small City")>0) {
      building = find_build(3, "Small City");
      switch_teams(1, 3, building);
    }
	while (num_type(3, "Large City")>0) {
      building = find_build(3, "Large City");
      switch_teams(1, 3, building);
    }
	while (num_type(3, "Major City")>0) {
      building = find_build(3, "Major City");
      switch_teams(1, 3, building);
    }
    defeat(3);
  }

  trigger (city_captured_by(3, 2, cap[3])){
	while (num_type(3, "Small City")>0) {
      building = find_build(3, "Small City");
      switch_teams(2, 3, building);
    }
	while (num_type(3, "Large City")>0) {
      building = find_build(3, "Large City");
      switch_teams(2, 3, building);
    }
	while (num_type(3, "Major City")>0) {
      building = find_build(3, "Major City");
      switch_teams(2, 3, building);
    }
    defeat(3);
  }

  trigger (city_captured_by(3, 4, cap[3])){
	while (num_type(3, "Small City")>0) {
      building = find_build(3, "Small City");
      switch_teams(4, 3, building);
    }
	while (num_type(3, "Large City")>0) {
      building = find_build(3, "Large City");
      switch_teams(4, 3, building);
    }
	while (num_type(3, "Major City")>0) {
      building = find_build(3, "Major City");
      switch_teams(4, 3, building);
    }
    defeat(3);
  }

  trigger (city_captured_by(4, 1, cap[4])){
	while (num_type(4, "Small City")>0) {
      building = find_build(4, "Small City");
      switch_teams(1, 4, building);
    }
	while (num_type(4, "Large City")>0) {
      building = find_build(4, "Large City");
      switch_teams(1, 4, building);
    }
	while (num_type(4, "Major City")>0) {
      building = find_build(4, "Major City");
      switch_teams(1, 4, building);
    }
    defeat(4);
  }

  trigger (city_captured_by(4, 2, cap[4])){
	while (num_type(4, "Small City")>0) {
      building = find_build(4, "Small City");
      switch_teams(2, 4, building);
    }
	while (num_type(4, "Large City")>0) {
      building = find_build(4, "Large City");
      switch_teams(2, 4, building);
    }
	while (num_type(4, "Major City")>0) {
      building = find_build(4, "Major City");
      switch_teams(2, 4, building);
    }
    defeat(4);
  }

  trigger (city_captured_by(4, 3, cap[4])){
	while (num_type(4, "Small City")>0) {
      building = find_build(4, "Small City");
      switch_teams(3, 4, building);
    }
	while (num_type(4, "Large City")>0) {
      building = find_build(4, "Large City");
      switch_teams(3, 4, building);
    }
	while (num_type(4, "Major City")>0) {
      building = find_build(4, "Major City");
      switch_teams(3, 4, building);
    }
    defeat(4);
  }

  trigger (cur_time >= time_limit) {
    defeat_attacker_and_allies();
  }

}