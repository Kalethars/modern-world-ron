include "ctw_lib.bhs"
include "game_structs.bhs"

int conquest destroy_city (String city_name);

conquest
{

  static int attacker = 1;
  static int defender = 2;

  String city_name;
  int city_id;
  
  static String cap_name = find_capital(attacker);

  static int generals[] = [0,0,0,0,0,0,0,0,0,0];
  static int general_go[] = [0,0,0,0,0,0,0,0,0,0];
  static int x_coords[] = [0,0,0,0,0,0,0,0,0,0];
  static int y_coords[] = [0,0,0,0,0,0,0,0,0,0];

  static UnitGroup general0;
  static UnitGroup general1;
  static UnitGroup general2;
  static UnitGroup general3;
  static UnitGroup general4;
  static UnitGroup general5;
  static UnitGroup general6;
  static UnitGroup general7;
  static UnitGroup general8;
  static UnitGroup general9;
  
  int general;

  int unit;
  int unit1;
  int unit2;
  int x;
  int y;
  int general_id;
  static int terr_per;
  static int num_generals;
  static int unit_value = 1;
  static int diff = get_difficulty();


  static int cur_time = time_min();

  static int end_time = get_time_limit();
  
  static int stop_per = 50;
  
  static int map_size = get_map_size();

  run_once {
    if (get_ctw_campaign() == "New World") {
      new_world_rules();
      new_world_setup();
    }
    general0.nation = defender;
    general1.nation = defender;
    general2.nation = defender;
    general3.nation = defender;
    general4.nation = defender;
    general5.nation = defender;
    general6.nation = defender;
    general7.nation = defender;
    general8.nation = defender;
    general9.nation = defender;
    for (z = 0; z < generals.length; z++) {
      generals[z] = find_unit(defender, "General");
    }
    if (diff > 2) {
      set_timer("gen_ambush", 30);
    }
    set_timer("new_troops", 1);
    set_timer("run_away", 60);
    set_timer("inactive_timer", 300);
    set_timer("gen_decoy", 2);
    terr_per = get_territory(attacker);
    add_objective_text(parse("Territory controlled: $NUM0%", terr_per), 2, "");
    num_generals = num_type_upgrade(defender, "General");
    add_objective_text(parse("Enemy Generals alive: $NUM0", num_generals), 3, "");
    set_timer("show_ambush", 1);
  }

  cur_time = time_min();

  if (cur_time >= end_time) defeat(1);
  
  if (num_generals == 0) victory (1);
  
  if (terr_per >= 80) victory (1);

  if (terr_per != get_territory(attacker)) {
    terr_per = get_territory(attacker);
    change_objective_text(2, parse("Territory controlled: $NUM0%", terr_per));
  }
  
  if (num_generals != num_type_upgrade(defender, "General")) {
    num_generals = num_type_upgrade(defender, "General");
    if (num_generals < 0) num_generals = 0;
    change_objective_text(3, parse("Enemy Generals alive: $NUM0", num_generals));
  }

  //keep the generals in ambush mode
  if (timer_expired("gen_ambush")) {
    for (z = 0; z < generals.length; z++) {
      if (!general_is_ambushing(defender, generals[z])) {
        if (has_move_order(defender, generals[z])) {
          if (timer_expired("tell_ambush")) {
            if (object_visible(attacker, defender, generals[z])) {
              bubble_text_obj($S("Ambush!"), defender, generals[z]);
              set_timer("tell_ambush", 1);
            }       
          } 
          general_ambush(defender, generals[z]);
          general_go[z] = 1;
          enable_trigger("keep_moving");
          set_timer("keep", 3);
        } else {
          if (object_visible(attacker, defender, generals[z])) {
            bubble_text_obj($S("Ambush!"), defender, generals[z]);
          }        
          general_ambush(defender, generals[z]);
          general_go[z] = 0;
        }
      }
    }
    set_timer("gen_ambush", 1);
  }

  if (city_captured(attacker, cap_name)) {
    defeat(attacker);
  }

  trigger keep_moving(timer_expired("keep")) {
    city_name = find_city_name(defender);
    city_id = find_city_id(city_name);
    for (z = 0; z < generals.length; z++) {
      if (general_go[z] == 1) {
        unit_move_order(defender, generals[z], x_coords[z], y_coords[z]);
      }
    }
  }
  
  if (timer_expired("run_away")) {
    for (n = num_type_upgrade(defender, "General"); n > 0; n--) {
      unit = find_unit(defender, "General");
      x = rand_int(0, get_map_size());
      y = rand_int(0, get_map_size());
      if (object_visible(attacker, defender, unit)) unit_move_order(defender, unit, x, y);
    }
    set_timer("run_away", 20);
  }
  
  trigger inactiveness(timer_expired("inactive_timer")) {
    set_timer("inactive_timer", 60);
    enable_trigger("inactiveness");
    unit = find_inactive_build(attacker, "Small City");
    if (unit == 0) unit = find_inactive_build(attacker, "Fort");
    if (unit == 0) unit = find_inactive_build(attacker, "Tower");
    x = object_position_x(attacker, unit);
    y = object_position_y(attacker, unit);
    general = find_unit(defender, "General");
    unit_move_order(defender, general, x, y);
  }   

  //give new troops to the mountain men
  trigger mountain_men(timer_expired("new_troops")) {
    for (z = 0; z < generals.length; z++) {
      if (unit_killed(defender, generals[z])) generals[z] = -1;
      if (generals[z] == -1) z++;
      if (z >= generals.length) break;
      x = object_position_x(defender, generals[z]);
      y = object_position_y(defender, generals[z]);
      if (num_type_upgrade(defender, "General") < 7) unit_value = 2;
      else if (num_type_upgrade(defender, "General") < 4) unit_value = 3;
      else if (time_later_than(15)) unit_value = 3;
      if (time_later_than(20)) unit_value = 5;
      if (population(defender) < (diff * num_type_upgrade(defender, "General"))) {
        if (get_tileset() == "GS_desert") {
          unit = create_unit_upgrade(defender, x + 1, y, "Light Camel", unit_value);
          unit_stance_order(defender, unit, "Raid");
          if (z == 0) general0.add_to_group(unit);
          else if (z == 1) general1.add_to_group(unit);
          else if (z == 2) general2.add_to_group(unit);
          else if (z == 3) general3.add_to_group(unit);
          else if (z == 4) general4.add_to_group(unit);
          else if (z == 5) general5.add_to_group(unit);
          else if (z == 6) general6.add_to_group(unit);
          else if (z == 7) general7.add_to_group(unit);
          else if (z == 8) general8.add_to_group(unit);
          else if (z == 9) general9.add_to_group(unit);
          unit = create_unit_in_group(defender, x + 1, y, "Camel Archer", unit_value);
          unit_stance_order(defender, unit, "Raid");
          if (z == 0) general0.add_to_group(unit);
          else if (z == 1) general1.add_to_group(unit);
          else if (z == 2) general2.add_to_group(unit);
          else if (z == 3) general3.add_to_group(unit);
          else if (z == 4) general4.add_to_group(unit);
          else if (z == 5) general5.add_to_group(unit);
          else if (z == 6) general6.add_to_group(unit);
          else if (z == 7) general7.add_to_group(unit);
          else if (z == 8) general8.add_to_group(unit);
          else if (z == 9) general9.add_to_group(unit);
        } else if (get_tileset() == "m_steppe") {
          unit = create_unit_upgrade(defender, x + 1, y, "Light Horse", unit_value);
          unit_stance_order(defender, unit, "Raid");
          if (z == 0) general0.add_to_group(unit);
          else if (z == 1) general1.add_to_group(unit);
          else if (z == 2) general2.add_to_group(unit);
          else if (z == 3) general3.add_to_group(unit);
          else if (z == 4) general4.add_to_group(unit);
          else if (z == 5) general5.add_to_group(unit);
          else if (z == 6) general6.add_to_group(unit);
          else if (z == 7) general7.add_to_group(unit);
          else if (z == 8) general8.add_to_group(unit);
          else if (z == 9) general9.add_to_group(unit);
          unit = create_unit_in_group(defender, x + 1, y, "Nomad", unit_value);      
          unit_stance_order(defender, unit, "Raid");
          if (z == 0) general0.add_to_group(unit);
          else if (z == 1) general1.add_to_group(unit);
          else if (z == 2) general2.add_to_group(unit);
          else if (z == 3) general3.add_to_group(unit);
          else if (z == 4) general4.add_to_group(unit);
          else if (z == 5) general5.add_to_group(unit);
          else if (z == 6) general6.add_to_group(unit);
          else if (z == 7) general7.add_to_group(unit);
          else if (z == 8) general8.add_to_group(unit);
          else if (z == 9) general9.add_to_group(unit);
        } else {
          unit = create_unit_upgrade(defender, x + 1, y, "Light Horse", unit_value);
          unit_stance_order(defender, unit, "Raid");
          if (z == 0) general0.add_to_group(unit);
          else if (z == 1) general1.add_to_group(unit);
          else if (z == 2) general2.add_to_group(unit);
          else if (z == 3) general3.add_to_group(unit);
          else if (z == 4) general4.add_to_group(unit);
          else if (z == 5) general5.add_to_group(unit);
          else if (z == 6) general6.add_to_group(unit);
          else if (z == 7) general7.add_to_group(unit);
          else if (z == 8) general8.add_to_group(unit);
          else if (z == 9) general9.add_to_group(unit);
          unit = create_unit_in_group(defender, x + 1, y, "Horse Archer", unit_value);
          unit_stance_order(defender, unit, "Raid");
          if (z == 0) general0.add_to_group(unit);
          else if (z == 1) general1.add_to_group(unit);
          else if (z == 2) general2.add_to_group(unit);
          else if (z == 3) general3.add_to_group(unit);
          else if (z == 4) general4.add_to_group(unit);
          else if (z == 5) general5.add_to_group(unit);
          else if (z == 6) general6.add_to_group(unit);
          else if (z == 7) general7.add_to_group(unit);
          else if (z == 8) general8.add_to_group(unit);
          else if (z == 9) general9.add_to_group(unit);
        }
        if (z == 0) general0.group_guard_order(defender, generals[z]);
        else if (z == 1) general1.group_guard_order(defender, generals[z]);
        else if (z == 2) general2.group_guard_order(defender, generals[z]);
        else if (z == 3) general3.group_guard_order(defender, generals[z]);
        else if (z == 4) general4.group_guard_order(defender, generals[z]);
        else if (z == 5) general5.group_guard_order(defender, generals[z]);
        else if (z == 6) general6.group_guard_order(defender, generals[z]);
        else if (z == 7) general7.group_guard_order(defender, generals[z]);
        else if (z == 8) general8.group_guard_order(defender, generals[z]);
        else if (z == 9) general9.group_guard_order(defender, generals[z]);
      }
      //if (rand_int(0,1)) general_decoy(defender, unit, defender, unit1);
      //else general_decoy(defender, unit, defender, unit2);
    }
    enable_trigger("mountain_men");
    unit = 85 - (diff * 5) - (terr_per/2) - (num_type_upgrade(attacker, "Fort") * 2) - num_type_upgrade(attacker, "Tower") - (num_type_upgrade(attacker, "Small City") * 2);
    if (unit < 0) unit = 20 - (diff * 2);
    if (diff < 3) unit += 5;
    if (diff > 2) {
      set_timer("new_troops", unit);
    }
  }

  //create decoys
  //if (timer_expired("gen_decoy")) {
  //  for (n = num_type(defender, "general"); n > 0; n--) {
  //    unit = find_unit(defender, "general");
  //    general_decoy(
  //}

  if (num_cities(defender) > 0) {
    city_name = find_city_name(defender);
    destroy_city(city_name);
  }

}

int conquest destroy_city (String city_name)
{

  int attacker = 1;
  int defender = 2;

  int building;
  String building_name;
  int build_destroyed = 0;

  nation = defender;
  
  for (step = 1; step < 12; step++) {

    switch(step){

      case 1:
        building_name = "Temple";
        break;
      case 2:
        building_name = "Market";
        break;
      case 3:
        building_name = "Library";
        break;
      case 4:
        building_name = "Senate";
        break;
      case 5:
        building_name = "University";
        break;
      case 6:
        building_name = "Farm";
        break;
      case 7:
        building_name = "Woodcutter's Camp";
        break;
      case 8:
        building_name = "Mine";
        break;
      case 9:
        building_name = "Granary";
        break;
      case 10:
        building_name = "Smelter";
        break;
      case 11:
        building_name = "Lumbermill";
        break;

    }

    for (n = num_city_buildings(nation, city_name, building_name, 1); n > 0; n--) {
      building = find_build_at_city(nation, city_name, building_name, 1);
      destroy_building(nation, building);
      build_destroyed++;
    }

  }

  building = find_city_id(city_name);
  destroy_building(nation, building);
  build_destroyed = build_destroyed + 3;

  return build_destroyed;

}